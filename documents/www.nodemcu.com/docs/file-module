<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="viewport" content="width=device-width">

  <title>NodeMCU Docs | file module</title>

  <!-- jQuery -->
  <script src="assets/js/jquery-1.11.1.min.js"></script>

  <!-- Let me embed vines -->
  <!--
  <script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script>
  -->
  
  <!-- Favicon -->
  <link rel="shortcut icon" href="assets/orange.ico" type="image/x-icon">

  <!-- Vendor theme mods -->
  <script src="assets/js/jquery-styling.js"></script>
  <script src="assets/js/prettify.js"></script>
  <!-- <script src='../assets/js/scrollspy.js'></script> -->

  <!-- Spark theme mods -->
  <link href="assets/css/style.css" rel="stylesheet">
  <script src="assets/js/animated-core.js"></script>

  <!-- Meta -->
  <meta content="NodeMCU" property="og:title">
  <meta content="Documentation for NodeMCU, a platform for connected devices." name="description">

</head>
<body role="flatdoc">

  <div id="docs">
    <div class="header">
      <div class="left">
        <a href="https://www.nodemcu.com">
          <img src="assets/images/nodemcu-docs.png" id="logo">
        </a>
      </div>
      <div class="right">
        <!--
        <a href="../assets/docs.zip" class="icon"><i class="icon ion-arrow-down-a"></i></a>
        -->
        <a href="http://www.github.com/nodemcu/nodemcu-firmware" class="icon"><i class="icon ion-social-github"></i></a>
        <!--
        <a href="https://github.com/spark/docs/edit/master/src/content/file-module.md" class="button">Edit this page</a>
        -->
      </div>
    </div>

    <div class="content-root" data-spy="scroll" data-target="#toc">
      <div class="menubar">
        <div class="menu section" role="flatdoc-menu">
          <ul>
            
              <li><a href="index.1" class="level-0 ">Index</a></li>
            
              <li><a href="node-module" class="level-0 ">node module</a></li>
            
              <li><a href="file-module" class="level-0 active">file module</a></li>
            
              <li><a href="wifi-module" class="level-0 ">wifi module</a></li>
            
              <li><a href="wifi-sta-module" class="level-0 ">wifi.sta module</a></li>
            
              <li><a href="wifi-ap-module" class="level-0 ">wifi.ap module</a></li>
            
              <li><a href="timer-module" class="level-0 ">timer module</a></li>
            
              <li><a href="gpio-module" class="level-0 ">GPIO module</a></li>
            
              <li><a href="pwm-module" class="level-0 ">PWM module</a></li>
            
              <li><a href="net-module" class="level-0 ">net module</a></li>
            
              <li><a href="net-server-module" class="level-0 ">net.server module</a></li>
            
              <li><a href="net-socket-module" class="level-0 ">net.socket module</a></li>
            
              <li><a href="i2c-module" class="level-0 ">i2c module</a></li>
            
              <li><a href="adc-module" class="level-0 ">adc module</a></li>
            
              <li><a href="uart-module" class="level-0 ">uart module</a></li>
            
              <li><a href="onewire-module" class="level-0 ">onewire module</a></li>
            
              <li><a href="bit-module" class="level-0 ">bit module</a></li>
            
              <li><a href="spi-module" class="level-0 ">spi module</a></li>
            
              <li><a href="mqtt-module" class="level-0 ">mqtt module</a></li>
            
              <li><a href="mqtt-client-module" class="level-0 ">mqtt client module</a></li>
            
          </ul>
        </div>
        <div class="menu section" role="flatdoc-menu">
          <ul id="toc">
          <li id="file-module-item" class="level-1"><a id="file-module-link" href="file-module#file-module" class="level-1">file module</a></li><li id="file-module-file-remove-item" class="level-2"><a id="file-module-file-remove-link" href="file-module#file-module-file-remove" class="level-2">file.remove()</a></li><li id="file-module-file-open-item" class="level-2"><a id="file-module-file-open-link" href="file-module#file-module-file-open" class="level-2">file.open()</a></li><li id="file-module-file-close-item" class="level-2"><a id="file-module-file-close-link" href="file-module#file-module-file-close" class="level-2">file.close()</a></li><li id="file-module-file-readline-item" class="level-2"><a id="file-module-file-readline-link" href="file-module#file-module-file-readline" class="level-2">file.readline()</a></li><li id="file-module-file-writeline-item" class="level-2"><a id="file-module-file-writeline-link" href="file-module#file-module-file-writeline" class="level-2">file.writeline()</a></li><li id="file-module-file-read-item" class="level-2"><a id="file-module-file-read-link" href="file-module#file-module-file-read" class="level-2">file.read()</a></li><li id="file-module-file-write-item" class="level-2"><a id="file-module-file-write-link" href="file-module#file-module-file-write" class="level-2">file.write()</a></li><li id="file-module-file-flush-item" class="level-2"><a id="file-module-file-flush-link" href="file-module#file-module-file-flush" class="level-2">file.flush()</a></li><li id="file-module-file-seek-item" class="level-2"><a id="file-module-file-seek-link" href="file-module#file-module-file-seek" class="level-2">file.seek()</a></li><li id="file-module-file-list-item" class="level-2"><a id="file-module-file-list-link" href="file-module#file-module-file-list" class="level-2">file.list()</a></li><li id="file-module-file-format-item" class="level-2"><a id="file-module-file-format-link" href="file-module#file-module-file-format" class="level-2">file.format()</a></li><li id="file-module-file-rename-item" class="level-2"><a id="file-module-file-rename-link" href="file-module#file-module-file-rename" class="level-2">file.rename()</a></li></ul>
        </div>
      </div>
      <div role="flatdoc-content" class="content">
        <h1 id="file-module">file module</h1>
<h2 id="file-module-file-remove">file.remove()</h2>
<h4 id="description">Description</h4>
<p>remove file from file system.</p>
<h4 id="syntax">Syntax</h4>
<p>file.remove(filename)</p>
<h4 id="parameters">Parameters</h4>
<p>filename: string, file to remove</p>
<h4 id="returns">Returns</h4>
<p>nil</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- there is foo.lua and bar.lua in file system </span>
    <span class="comment">-- remove &quot;foo.lua&quot; from file system.</span>
    file.remove(<span class="string">&quot;foo.lua&quot;</span>)
    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(file.list()) <span class="keyword">do</span> <span class="built_in">print</span>(k) <span class="keyword">end</span></code></pre>
<blockquote>
<p>  bar.lua</p>
</blockquote>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-close">file.close()</a></p>
<h2 id="file-module-file-open">file.open()</h2>
<h4 id="description">Description</h4>
<p>open file.</p>
<h4 id="syntax">Syntax</h4>
<p>file.open(filename, mode)</p>
<h4 id="parameters">Parameters</h4>
<p>filename: string, file to be opened, directories are not supported<br>
mode: string<br>
   &quot;r&quot;: read mode (the default)<br>
   &quot;w&quot;: write mode<br>
   &quot;a&quot;: append mode<br>
   &quot;r+&quot;: update mode, all previous data is preserved<br>
   &quot;w+&quot;: update mode, all previous data is erased<br>
   &quot;a+&quot;: append update mode, previous data is preserved, writing is only allowed at the end of file</p>
<h4 id="returns">Returns</h4>
<p>nil: file not opened, or not exists.
true: file opened ok.</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos; in read mode, print the first line.</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)
    <span class="built_in">print</span>(file.readline())
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-close">file.close()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-readline">file.readline()</a></p>
<h2 id="file-module-file-close">file.close()</h2>
<h4 id="description">Description</h4>
<p>close the file.</p>
<h4 id="syntax">Syntax</h4>
<p>file.close()</p>
<h4 id="parameters">Parameters</h4>
<p>nil</p>
<h4 id="returns">Returns</h4>
<p>nil</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos;, print the first line.</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)
    <span class="built_in">print</span>(file.readline())
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-readline">file.readline()</a></p>
<h2 id="file-module-file-readline">file.readline()</h2>
<h4 id="description">Description</h4>
<p>read one line of file which is opened before.</p>
<h4 id="syntax">Syntax</h4>
<p>file.readline()</p>
<h4 id="parameters">Parameters</h4>
<p>nil</p>
<h4 id="returns">Returns</h4>
<p>file content in string, line by line, include EOL(&apos;\n&apos;)<br>
return nil when EOF.</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- print the first line of &apos;init.lua&apos;</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)
    <span class="built_in">print</span>(file.readline())
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-close">file.close()</a></p>
<h2 id="file-module-file-writeline">file.writeline()</h2>
<h4 id="description">Description</h4>
<p>write string to file and add a &apos;\n&apos; at the end.</p>
<h4 id="syntax">Syntax</h4>
<p>file.writeline(string)</p>
<h4 id="parameters">Parameters</h4>
<p>string: content to be write to file</p>
<h4 id="returns">Returns</h4>
<p>true: write ok.
nil: there is error</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos; in &apos;a+&apos; mode</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;a+&quot;</span>)

    <span class="comment">-- write &apos;foo bar&apos; to the end of the file</span>
    file.writeline(<span class="string">&apos;foo bar&apos;</span>)
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#fl_open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#fl_write">file.write()</a></p>
<h2 id="file-module-file-read">file.read()</h2>
<h4 id="description">Description</h4>
<p>read content of file which is opened before.</p>
<h4 id="syntax">Syntax</h4>
<p>file.read()</p>
<h4 id="parameters">Parameters</h4>
<p>if nothing passed in, read all byte in file.<br>
if pass a number n, then read n byte from file, or EOF is reached.<br>
if pass a string &quot;q&quot;, then read until &apos;q&apos; or EOF is reached. </p>
<h4 id="returns">Returns</h4>
<p>file content in string<br>
return nil when EOF.</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- print the first line of &apos;init.lua&apos;</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)
    <span class="built_in">print</span>(file.read(<span class="string">&apos;\r&apos;</span>))
    file.close()

    <span class="comment">-- print the first 5 byte of &apos;init.lua&apos;</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;r&quot;</span>)
    <span class="built_in">print</span>(file.read(<span class="number">5</span>))
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-close">file.close()</a></p>
<h2 id="file-module-file-write">file.write()</h2>
<h4 id="description">Description</h4>
<p>write string to file.</p>
<h4 id="syntax">Syntax</h4>
<p>file.write(string)</p>
<h4 id="parameters">Parameters</h4>
<p>string: content to be write to file.</p>
<h4 id="returns">Returns</h4>
<p>true: write ok.
nil: there is error</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos; in &apos;a+&apos; mode</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;a+&quot;</span>)

    <span class="comment">-- write &apos;foo bar&apos; to the end of the file</span>
    file.write(<span class="string">&apos;foo bar&apos;</span>)
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-writeline">file.writeline()</a></p>
<h2 id="file-module-file-flush">file.flush()</h2>
<h4 id="description">Description</h4>
<p>flush to file.</p>
<h4 id="syntax">Syntax</h4>
<p>file.flush()</p>
<h4 id="parameters">Parameters</h4>
<p>nil</p>
<h4 id="returns">Returns</h4>
<p>nil</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos; in &apos;a+&apos; mode</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;a+&quot;</span>)
    <span class="comment">-- write &apos;foo bar&apos; to the end of the file</span>
    file.write(<span class="string">&apos;foo bar&apos;</span>)
    file.flush()
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-writeline">file.writeline()</a></p>
<h2 id="file-module-file-seek">file.seek()</h2>
<h4 id="description">Description</h4>
<p>Sets and gets the file position, measured from the beginning of the file, to the position given by offset plus a base specified by the string whence.</p>
<h4 id="syntax">Syntax</h4>
<p>file.seek(whence, offset)</p>
<h4 id="parameters">Parameters</h4>
<p>whence:<br>
&quot;set&quot;: base is position 0 (beginning of the file);<br>
&quot;cur&quot;: base is current position;(default value)<br>
&quot;end&quot;: base is end of file;<br>
offset: default 0</p>
<h4 id="returns">Returns</h4>
<p>success: returns the final file position<br>
fail: returns nil</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- open &apos;init.lua&apos; in &apos;a+&apos; mode</span>
    file.open(<span class="string">&quot;init.lua&quot;</span>, <span class="string">&quot;a+&quot;</span>)
    <span class="comment">-- write &apos;foo bar&apos; to the end of the file</span>
    file.write(<span class="string">&apos;foo bar&apos;</span>)
    file.flush()
    file.seek(<span class="string">&quot;set&quot;</span>)
    <span class="built_in">print</span>(file.readline())
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-open">file.open()</a><br>
<strong>-</strong>   <a href="file-module#file-module-file-writeline">file.writeline()</a></p>
<h2 id="file-module-file-list">file.list()</h2>
<h4 id="description">Description</h4>
<p>list all files.</p>
<h4 id="syntax">Syntax</h4>
<p>file.list()</p>
<h4 id="parameters">Parameters</h4>
<p>nil</p>
<h4 id="returns">Returns</h4>
<p>a lua table which contains the {file name: file size} pairs</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">--print name and size for all files in file system.</span>
    l = file.list();
    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(l) <span class="keyword">do</span>
      <span class="built_in">print</span>(<span class="string">&quot;name:&quot;</span>..k..<span class="string">&quot;, size:&quot;</span>..v)
    <span class="keyword">end</span></code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-remove">file.remove()</a></p>
<h2 id="file-module-file-format">file.format()</h2>
<h4 id="description">Description</h4>
<p>format file system.</p>
<h4 id="syntax">Syntax</h4>
<p>file.format()</p>
<h4 id="parameters">Parameters</h4>
<p>nil</p>
<h4 id="returns">Returns</h4>
<p>nil</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    file.format()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-remove">file.remove()</a></p>
<h2 id="file-module-file-rename">file.rename()</h2>
<h4 id="description">Description</h4>
<p>rename a file. <br>
<strong>NOTE:</strong> the current opened file will be closed.</p>
<h4 id="syntax">Syntax</h4>
<p>file.rename(oldname, newname)</p>
<h4 id="parameters">Parameters</h4>
<p>oldname: old file name, directories are not supported<br>
newname: new file name, directories are not supported<br></p>
<h4 id="returns">Returns</h4>
<p>false: rename failed.
true: rename ok.</p>
<h4 id="example">Example</h4>
<pre><code class="language-lua">    <span class="comment">-- rename file &apos;temp.lua&apos; to &apos;init.lua&apos;.</span>
    file.rename(<span class="string">&quot;temp.lua&quot;</span>,<span class="string">&quot;init.lua&quot;</span>)
    file.close()</code></pre>
<h4 id="see-also">See also</h4>
<p><strong>-</strong>   <a href="file-module#file-module-file-close">file.close()</a><br></p>

      </div>
    </div>
  </div>

  <!-- Custom -->
  <script src="assets/js/docs.js"></script>

</body>
</html>
